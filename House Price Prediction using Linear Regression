# --------------------------------------------------------- 
# WEEK 7: Introduction to Machine Learning (ML)
# Project: House Price Prediction using Linear Regression
# ---------------------------------------------------------

# Step 1: Import Required Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# ---------------------------------------------------------
# Step 2: Create a Sample Dataset
# (In real projects, you can load data from CSV using pd.read_csv)
# ---------------------------------------------------------

data = {
    'Area': [850, 900, 1000, 1200, 1500, 1800, 2000, 2200, 2500, 3000],
    'Bedrooms': [2, 2, 3, 3, 3, 4, 3, 4, 4, 5],
    'Age': [10, 8, 5, 3, 2, 1, 4, 2, 3, 1],
    'Price': [150000, 165000, 180000, 210000, 240000, 300000, 270000, 310000, 340000, 400000]
}

# Convert dictionary to DataFrame
df = pd.DataFrame(data)
print("üìä Sample Dataset:")
print(df)

# ---------------------------------------------------------
# Step 3: Data Preprocessing
# ---------------------------------------------------------

# Define Features (X) and Target (y)
X = df[['Area', 'Bedrooms', 'Age']]
y = df['Price']

# Split into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

print("\n‚úÖ Data Split Complete:")
print(f"Training Samples: {len(X_train)}, Testing Samples: {len(X_test)}")

# ---------------------------------------------------------
# Step 4: Train the Linear Regression Model
# ---------------------------------------------------------

model = LinearRegression()
model.fit(X_train, y_train)

print("\nü§ñ Model Training Complete!")

# ---------------------------------------------------------
# Step 5: Make Predictions
# ---------------------------------------------------------

y_pred = model.predict(X_test)

# Display Actual vs Predicted Prices
result = pd.DataFrame({'Actual Price': y_test, 'Predicted Price': y_pred})
print("\nüìà Prediction Results:")
print(result)

# ---------------------------------------------------------
# Step 6: Evaluate Model Performance
# ---------------------------------------------------------

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("\nüìä Model Evaluation:")
print("Mean Squared Error (MSE):", mse)
print("R2 Score:", r2)

# ---------------------------------------------------------
# Step 7: Visualize Actual vs Predicted Prices
# ---------------------------------------------------------

plt.scatter(y_test, y_pred, color='blue')
plt.plot([y.min(), y.max()], [y.min(), y.max()], color='red', linewidth=2)
plt.title("Actual vs Predicted House Prices")
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.show()

# ---------------------------------------------------------
# Step 8: Predict New House Price
# ---------------------------------------------------------

# Example: Predict the price of a new house
new_data = pd.DataFrame({
    'Area': [2000],
    'Bedrooms': [3],
    'Age': [2]
})

predicted_price = model.predict(new_data)
print("\nüè† Predicted Price for New House:", predicted_price[0])

# ---------------------------------------------------------
# Step 9: Display Model Coefficients (Optional)
# ---------------------------------------------------------

print("\n‚öôÔ∏è Model Details:")
print("Intercept:", model.intercept_)
print("Coefficients:", list(zip(X.columns, model.coef_)))
